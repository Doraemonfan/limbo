static const auto _____ = []()
{
        ios::sync_with_stdio(false);
        cin.tie(nullptr);
        return nullptr;
 }();
class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size(), n = nums2.size();
        if (m > n) return findMedianSortedArrays(nums2, nums1);
        int i, j, imin = 0, imax = m, half = (m + n + 1) / 2;
        while (imin <= imax) {
            i = (imin & imax) + ((imin ^ imax) >> 1);
            j = half - i;
            if (i > 0 && j < n && nums1[i - 1] > nums2[j]) imax = i - 1;
            else if (j > 0 && i < m && nums2[j - 1] > nums1[i]) imin = i + 1;
            else break;
        }
        int num1;
        if (!i) num1 = nums2[j - 1];
        else if (!j) num1 = nums1[i - 1]; 
        else num1 = max(nums1[i - 1], nums2[j - 1]);
        if ((m + n) & 1) return num1;
        int num2;
        if (i == m) num2 = nums2[j];
        else if (j == n) num2 = nums1[i];
        else num2 = min(nums1[i], nums2[j]);
        return (num1 + num2) / 2.0;
    }
};


////////////////////////
static string s=[](){
    std::ios::sync_with_stdio(false);
    cin.tie(NULL);
    return "";
}();
class Solution {
public:
    vector<int> mergeSort(vector<int>& nums1, vector<int>& nums2) {
  int i = 0, j = 0;
  int size1 = nums1.size();
  int size2 = nums2.size();

  vector<int> bothNums;

  while (i < size1 && j < size2) {
    if (nums1[i] < nums2[j]) {
      bothNums.emplace_back(nums1[i]);
      i++;
    } else {
      bothNums.emplace_back(nums2[j]);
      j++;
    }
  }

  // add what's left
  while (i < size1) {
    bothNums.emplace_back(nums1[i]);
    i++;
  }

  while (j < size2) {
    bothNums.emplace_back(nums2[j]);
    j++;
  }

  return bothNums;
}

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
// use mergesort to put them into one array
// get the median of that new array
  vector<int> combined = mergeSort(nums1, nums2);
  double median;
  if (combined.size() % 2 == 0) {
    int index = combined.size() / 2 - 1;
    median = (double)(combined.at(index) + combined.at(index + 1)) / 2;
  } else {
    int index = combined.size() / 2;
    median = (double)combined.at(index);
  }
  return median;
}
};

///////////////////////////////////
static const auto __speedup_ = [](){
    std::cout.sync_with_stdio(false);
    std::cin.tie(nullptr);
    return 0;
}();

class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2)
    {
        size_t tot = nums1.size() + nums2.size();
	bool even = ! bool(tot&1);
	tot = (tot-1) >> 1;
	size_t i1=0,i2=0;
	int cur;
	for(size_t i=0;i<=tot;++i)
	{
		int first  = i1<nums1.size() ? nums1[i1] : std::numeric_limits<int>::max();
		int second = i2<nums2.size() ? nums2[i2] : std::numeric_limits<int>::max();
		if(first < second)
		{
			cur = first;
			++i1;
		}
		else
		{
			cur = second;
			++i2;
		}
	}
	double result = cur;
	if(even)
	{
		int first  = i1<nums1.size() ? nums1[i1] : std::numeric_limits<int>::max();
		int second = i2<nums2.size() ? nums2[i2] : std::numeric_limits<int>::max();
		cur += first < second? first : second;
		result = cur * 0.5;
	}
	return result;
    }
};
////////////////////////////////////
